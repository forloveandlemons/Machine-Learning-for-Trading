"""A simple wrapper for linear regression."""import numpy as npimport pandas as pdimport operator import mathimport LinRegLearner as lrlimport KNNLearner as knn#from datetime import datetimeclass BagLearner(object):    def __init__(self,learner, kwargs, bags=20, boost=False):    	self.bags=bags    	self.boost=boost    	self.learners = [learner(**kwargs) for each in range(self.bags)]            def addEvidence(self,dataX,dataY):        """        @summary: Add training data to learner        @param dataX: X values of data to add        @param dataY: the Y training values        """    	'''        # slap on 1s column so linear regression finds a constant term        newdataX = np.ones([dataX.shape[0],dataX.shape[1]+1])        newdataX[:,0:dataX.shape[1]]=dataX        '''        trainingSize=len(dataX)        bagDF=pd.DataFrame(index=range(1,trainingSize+1),columns=range(1,self.bags+1))        bag_index=bagDF.index        model=[]        for each in range(0,len(self.learners)):        	bagchoice=np.random.choice(trainingSize, size=trainingSize, replace=True)        	bagrandom=pd.Series(bagchoice)        	bagDF.ix[each]=bagrandom        	newtraindataX = np.ones([dataX.shape[0],dataX.shape[1]])        	newtraindataY = dataY.copy()        	for i in range(len(bagrandom)):        		newtraindataX[i]=dataX[bagrandom[i]]        		newtraindataY[i]=dataY[bagrandom[i]]        	self.learners[each].addEvidence(newtraindataX,newtraindataY)        	            def query(self,points):        """        @summary: Estimate a set of test points given the model we built.        @param points: should be a numpy array with each row corresponding to a specific query.        @returns the estimated values according to the saved model.        """        predY=[]                pred_result=pd.DataFrame(index=range(len(self.learners)),columns=range(len(points)))                        for each in range(len(self.learners)):        	#start=datetime.now()        	#print start        	temp_learner=self.learners[each]        	temp_list=temp_learner.query(points)        	for i in range(len(temp_list)):        		pred_result.ix[each,i]=temp_list[i]        	pred_mean=pred_result.mean()        	predY=pred_mean.tolist()        	#print datetime.now()-start        return predY                if __name__=="__main__":    print "the secret clue is 'zzyzx'"